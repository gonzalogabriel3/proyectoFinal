/*Funcion que compara todos los puntos de un recorrido,con una posicion de un usuario(POINT),para determinar
    si un usuario esta dentro de un recorrido*/
    public function compararPuntosRecorrido($idUsuario,$idRecorrido){
        //Obtengo el recorrido,y el usuario
        $usuario=\DB::select("SELECT *,st_x(ultima_posicion::geometry) as latitud,st_y(ultima_posicion::geometry) as longitud FROM usuarios WHERE id=$idUsuario");
        $recorrido=\DB::select("SELECT St_Astext(geom::geometry) as puntos FROM recorridos WHERE id=$idRecorrido");

        //Obtengo todos los puntos en formato array de un recorrido
        $puntos = explode(",", $recorrido[0]->puntos);
        $puntos[0]=substr($puntos[0],11);
        $puntos[count($puntos)-1]=substr($puntos[count($puntos)-1],0,-1);
        //Imprimir para prueba: dd($puntos);
        
        //Obtengo la latitud y longitud del usuario
        $usuarioLatitud=(float)$usuario[0]->latitud;
        $usuarioLongitud=(float)$usuario[0]->longitud;
        
        //Recorro todos los puntos del recorrido,y los comparo con la ultima posicion de un usuario
        foreach ($puntos as $punto) {
            $coincidencia=\DB::select("SELECT ST_Equals('POINT($usuarioLatitud $usuarioLongitud)','POINT($punto)') as coincidencia");
            //Imprimir para prueba: var_dump($coincidencia[0]->coincidencia);
            
            //Si hay al menos una coincidencia retorno verdadero
            if($coincidencia[0]->coincidencia==true){
                return true;
            }

        }

        return response()->json([
            'message' => 'El usuario no esta dentro del recorrido'
        ], 200);

    }
